setwd("~/")
setwd("~/")
source('~/bank.R', encoding = 'UTF-8')
source('~/bank.R', encoding = 'UTF-8')
setwd("~/")
setwd("~/")
setwd("~/")
setwd("~/mc")
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
source('~/mc/bank.R')
setwd("C:\Users\tatiana\Documents\mc")
setwd("C:/Users/tatiana/Documents/mc")
data <- read.csv("bank-full.csv", header = T, sep = ";")
data <- read.csv(".bank-full.csv", header = T, sep = ";")
data <- read.csv("./bank-full.csv", header = T, sep = ";")
setwd("~/mc")
source('~/mc/bank.R')
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
data <- read.csv("bank-full.csv", header = T, sep = ";")
setwd("C:/Users/tatiana/Documents/mc")
data <- read.csv("bank-full.csv", header = T, sep = ";")
setwd("C:/Users/tatiana/Documents")
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
setwd("~/")
data_2012 <- read.csv(file = "data/NIJ2012_MAR01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2013 <- read.csv(file = "data/NIJ2013_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2014 <- read.csv(file = "data/NIJ2014_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2015 <- read.csv(file = "data/NIJ2015_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
View(data_2015)
View(data_2014)
View(data_2013)
View(data_2012)
plot(data_2014)
library(devtools)
if(!require(devtools)){
install.packages("devtools")
}
library(devtools)
install_github("ujjwalkarn/xda")
?xda
library(xda)
?xda
??xda
numSummary(iris)
numSummary(iris)
data_2012_2015 <- read.csv(file = "data/data_2012-2015.csv", header = T, sep = ";", stringsAsFactors = F)
numSummary(data_2012_2015)
charSummary(data_2012_2015)
View(data_2012_2015)
bivariate(data_2012_2015,'CATEGORY','occ_date')
file_name <- "bi_category-occ_date.txt"
file_name <- paste(type, file_name)
bivariate(data_2012_2015,'CATEGORY','occ_date')
capture.output(s, file = file_name)
s <- bivariate(data_2012_2015,'CATEGORY','occ_date')
capture.output(s, file = file_name)
Plot(data_2012_2015,'CATEGORY')
Plot(data_2012_2015,'occ_date')
Plot(data_2012_2015,'CATEGORY')
Plot(data_2012_2015,'x_cordinate')
Plot(data_2012_2015,'x_coordinate')
Plot(mtcars,'mpg')
Plot(iris,'Species')
iris
Plot(iris,'Sepal.Length')
?plot
plot(data_2012_2015)
plot(data_2012_2015$CATEGORY)
boxplot(mtcars$mpg)
mtcars <- edit(mtcars)
boxplot(mtcars$mpg)
IQR(mtcars$mpg)
library(dplyr)
install.packages("dplyr", dependencies = T)
library(dplyr)
install.packages("dplyr", dependencies = T)
library(dplyr)
library(dplyr)
data <- read.csv("taxas.csv", header = T, stringsAsFactors = F, encoding = "UTF-8")
setwd("~/")
data <- read.csv("taxas.csv", header = T, stringsAsFactors = F, encoding = "UTF-8")
setwd("~/")
data <- read.csv("taxas.csv", header = T, stringsAsFactors = F, encoding = "UTF-8")
View(data)
library(dplyr)
setwd("C:/Users/tatiana/valei-me-sao-francisco/scripts")
municipios_beneficiados <- read.csv("../arcgis/populacao_agua_esgoto.csv", header = T, encoding = "UTF-8", stringsAsFactors = F, sep = ";")
dados <- mutate(municipios_beneficiados, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
View(municipios_beneficiados)
View(municipios_beneficiados)
View(dados)
write.table(dados, file = "taxas.csv", sep = ",", col.names = T, quote = T, encoding = "UTF-8")
write.table(dados, file = "taxas.csv", sep = ",", col.names = T, quote = T, fileEncoding = "UTF-8")
taxas <- read.csv("taxas.csv", header = T, encoding = "UTF-8", stringsAsFactors = F)
View(taxas)
library(dplyr)
setwd("C:/Users/tatiana/valei-me-sao-francisco/scripts")
municipios_beneficiados <- read.csv("../arcgis/populacao_agua_esgoto_hist.csv", header = T, encoding = "UTF-8", stringsAsFactors = F, sep = ";")
municipios_esgoto_agua <- read.csv("../arcgis/populacao_agua_esgoto.csv", header = T, encoding = "UTF-8", stringsAsFactors = F, sep = ";")
municipios_esgoto_agua_hist <- read.csv("../arcgis/populacao_agua_esgoto_hist.csv", header = T, encoding = "UTF-8", stringsAsFactors = F, sep = ";")
m <- mutate(municipios_esgoto_agua, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
m_hist <- mutate(municipios_esgoto_agua_hist, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
municipios_esgoto_agua_hist <- read.csv("../arcgis/populacao_agua_esgoto_hist.csv", header = T, encoding = "UTF-8", stringsAsFactors = F, sep = ";")
m <- mutate(municipios_esgoto_agua, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
m_hist <- mutate(municipios_esgoto_agua_hist, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
m_hist <- mutate(municipios_esgoto_agua_hist, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
municipios_esgoto_agua_hist <- read.csv("../arcgis/populacao_agua_esgoto_hist.csv", header = T, encoding = "UTF-8", stringsAsFactors = F, sep = ";")
m <- mutate(municipios_esgoto_agua, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
m_hist <- mutate(municipios_esgoto_agua_hist, taxa_esgoto = esgoto/populacao, taxa_agua = agua/populacao)
View(municipios_esgoto_agua_hist)
View(m_hist)
install.packages("rjson")
library(rjson)
x <- list( alpha = 1:5, beta = "Bravo",
gamma = list(a=1:3, b=NULL),
delta = c(TRUE, FALSE) )
json <- toJSON( x )
fromJSON( json )
x
x <- toJSON(unname(split(municipios_esgoto_agua_hist, 1:nrow(municipios_esgoto_agua_hist))))
x
?toJSON
install.packages("tidyjson")
require(RJSONIO)
makeList<-function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){list(name=y,children=makeList(listSplit[[y]]))})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],Percentage=x[,2][y])})
}
}
jsonOut<-toJSON(list(name="MyData",children=makeList(MyData[-1])))
jsonOut<-toJSON(list(name="MyData",children=makeList(m_hist[-1])))
cat(jsonOut)
taxas_hist <- read.csv("taxas_hist.csv", header = T, encoding = "UTF-8", stringsAsFactors = F)
write.table(m_hist, file = "taxas_hist.csv", sep = ",", col.names = T, quote = T, fileEncoding = "UTF-8")
install.packages("jsonlite")
library(jsonlite)
DF <-
data.frame(V1=c(717374788,429700970),
V2=c(694405490, 420694891),
V3=c(606978836,420694211),
V4=c(578345907,420792447),
V5=c(555450273,420670045))
idsIndexes <- which(names(DF) != 'V1')
a <- lapply(1:nrow(DF),FUN=function(i){
list(V1=list(id=DF[i,'V1']),
results=lapply(idsIndexes,
FUN=function(j)list(id=DF[i,j])))
})
txt <- toJSON(a)
txt <- prettify(txt)
txt
View(DF)
m_hist <- m_hist %<% select(id, nome, ano, agua, esgoto, populacao)
m_hist <- m_hist %>% select(id, nome, ano, agua, esgoto, populacao)
View(m_hist)
TRUE $ FALSE
TRUE $$ FALSE
TRUE & FALSE
idsIndexes <- which(names(m_hist) != 'id' & names(m_hist) != 'nome')
a <- lapply(1:nrow(m_hist),FUN=function(i){
list(V1=list(id=m_hist[i,'id'], nome=m_hist[i, 'nome']),
valores=lapply(idsIndexes,
FUN=function(j)list(id=m_hist[i,j])))
})
txt <- toJSON(a)
txt <- prettify(txt)
txt
m_hist$id[1]
idsIndexes <- which(names(m_hist) != 'id' & names(m_hist) != 'nome')
a <- lapply(1:nrow(m_hist),FUN=function(i){
list(municipio=list(id=m_hist[i,'id'], nome=m_hist[i, 'nome']),
valores=lapply(idsIndexes,
FUN=function(j)list(ano=m_hist[i,'ano'], agua=m_hist[i,'agua'], esgoto=m_hist[i,'esgoto'], populacao=m_hist[i,'populacao'])))
})
# serialize to json
txt <- toJSON(a)
# if you want, indent the json
txt <- prettify(txt)
txt
class(m_hist[1,'ano'])
a <- lapply(1:nrow(m_hist),FUN=function(i){
list(municipio=list(id=m_hist[i,'id'], nome=m_hist[i, 'nome']),
valores=lapply(idsIndexes,
FUN=function(j)list(ano=m_hist[i,'ano'], agua=m_hist[i,'agua'], esgoto=m_hist[i,'esgoto'], populacao=m_hist[i,'populacao'])))
})
txt <- toJSON(a)
txt <- prettify(txt)
txt
idsIndexes <- which(names(m_hist) != 'id' & names(m_hist) != 'nome')
a <- lapply(1:nrow(m_hist),FUN=function(i){
list(municipio=list(id=m_hist[i,'id'], nome=m_hist[i, 'nome']),
valores=lapply(idsIndexes,
FUN=function(j)list(ano=m_hist[i,'ano'])))
})
# serialize to json
txt <- toJSON(a)
# if you want, indent the json
txt <- prettify(txt)
txt
DF <-
data.frame(V1=c(717374788,429700970),
V2=c(694405490, 420694891),
V3=c(606978836,420694211),
V4=c(578345907,420792447),
V5=c(555450273,420670045))
# transform the data.frame into the described structure
idsIndexes <- which(names(DF) != 'V1')
a <- lapply(1:nrow(DF),FUN=function(i){
list(V1=list(id=DF[i,'V1']),
results=lapply(idsIndexes,
FUN=function(j)list(id=DF[i,j])))
})
# serialize to json
txt <- toJSON(a)
# if you want, indent the json
txt <- prettify(txt)
txt
DF <-
data.frame(V1=c(717374788,429700970),
V2=c(694405490, 420694891),
V3=c(606978836,420694211),
V4=c(578345907,420792447),
V5=c(555450273,420670045))
# transform the data.frame into the described structure
idsIndexes <- which(names(DF) != 'V1')
a <- lapply(1:nrow(DF),FUN=function(i){
list(V1=list(id=DF[i,'V1']),
results=lapply(idsIndexes,
FUN=function(j)list(id=DF[i,j])))
})
# serialize to json
txt <- jsonlite:toJSON(a)
# if you want, indent the json
txt <- prettify(txt)
txt
a
